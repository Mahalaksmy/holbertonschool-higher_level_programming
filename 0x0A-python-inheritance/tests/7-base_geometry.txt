=============================
The ``7-base_geometry`` module
=============================

Using ``BaseGeometry``
---------------------

Import the class:

    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Now test it:

correct cases

    >>> bg = BaseGeometry()
    >>> bg.integer_validator("", 13)

    >>> bg.integer_validator("Jacinto", 32)

    >>> bg.integer_validator("my_list", 8)

    >>> bg.integer_validator(None, 89)


error cases

    >>> bg.integer_validator("my_list", "123")
    Traceback (most recent call last):
    TypeError: my_list must be an integer

    >>> bg.area()
    Traceback (most recent call last):
    Exception: area() is not implemented

    >>> bg.integer_validator("my_list", 0)
    Traceback (most recent call last):
    ValueError: my_list must be greater than 0

    >>> bg.integer_validator("float")
    Traceback (most recent call last):
    TypeError: integer_validator() missing 1 required positional argument: 'value'

    >>> bg.integer_validator()
    Traceback (most recent call last):
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

    >>> bg.integer_validator("Hello", False)
    Traceback (most recent call last):
    TypeError: Hello must be an integer

    >>> bg.integer_validator("Dedo", {"Jacinto", 13})
    Traceback (most recent call last):
    TypeError: Dedo must be an integer

    >>> bg.integer_validator("tuple", (8, 9, 10))
    Traceback (most recent call last):
    TypeError: tuple must be an integer

    >>> bg.integer_validator("list", [0, 1, 2])
    Traceback (most recent call last):
    TypeError: list must be an integer